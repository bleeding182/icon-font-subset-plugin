name: Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
    paths:
      - 'font-subsetting/**'
      - '.github/workflows/build-and-publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'font-subsetting/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1

jobs:
  # Build Docker image once and share it
  build-docker-image:
    name: Build Cross-Compilation Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/fontsubsetting-cross-compiler:latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/fontsubsetting-cross-compiler
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: font-subsetting/font-subsetting-plugin
          file: font-subsetting/font-subsetting-plugin/Dockerfile.cross-compile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Verify Docker image
        run: |
          echo "Docker image tags pushed:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Verifying latest image exists:"
          docker pull "${{ env.REGISTRY }}/${{ github.repository_owner }}/fontsubsetting-cross-compiler:latest"

  # Build native libraries in parallel using matrix
  build-native-libraries:
    name: Build Native Library - ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: build-docker-image
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux-x86_64
            toolchain: ""
            output_name: libfontsubsetting.so
            cmake_args: ""
          
          - platform: windows-x86_64
            toolchain: windows-x86_64.cmake
            output_name: fontsubsetting.dll
            cmake_args: ""
          
          - platform: darwin-x86_64
            toolchain: darwin-x86_64.cmake
            output_name: libfontsubsetting.dylib
            cmake_args: ""
          
          - platform: darwin-aarch64
            toolchain: darwin-aarch64.cmake
            output_name: libfontsubsetting.dylib
            cmake_args: ""
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache native library
        id: cache-native
        uses: actions/cache@v4
        with:
          path: font-subsetting/font-subsetting-plugin/build/native-${{ matrix.platform }}
          key: native-${{ matrix.platform }}-${{ hashFiles('font-subsetting/font-subsetting-plugin/src/main/cpp/**', 'font-subsetting/font-subsetting-plugin/cmake/**') }}
      
      - name: Log in to GitHub Container Registry
        if: steps.cache-native.outputs.cache-hit != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build native library
        if: steps.cache-native.outputs.cache-hit != 'true'
        working-directory: font-subsetting/font-subsetting-plugin
        run: |
          # Pull the shared Docker image
          IMAGE_NAME="${{ needs.build-docker-image.outputs.image-name }}"
          echo "Using Docker image: $IMAGE_NAME"
          docker pull "$IMAGE_NAME"
          
          # Create build script for this specific platform
          cat > build-single-platform.sh << 'EOF'
          #!/bin/bash
          set -e
          
          PLATFORM="${1}"
          TOOLCHAIN="${2}"
          OUTPUT_NAME="${3}"
          
          # Ensure JAVA_HOME is set
          if [ -z "$JAVA_HOME" ]; then
              if [ -d "/usr/lib/jvm/java-17-openjdk-amd64" ]; then
                  export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
              elif [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
                  export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
              else
                  echo "ERROR: JAVA_HOME not set and could not find Java installation"
                  exit 1
              fi
          fi
          
          echo "Using JAVA_HOME: $JAVA_HOME"
          
          SRC_DIR="/workspace/src/main/cpp"
          BUILD_DIR="/workspace/build/native-${PLATFORM}"
          OUTPUT_DIR="/workspace/build/native-${PLATFORM}"
          
          echo "Building ${PLATFORM}..."
          mkdir -p "${BUILD_DIR}"
          cd "${BUILD_DIR}"
          
          if [ -z "${TOOLCHAIN}" ]; then
              cmake "${SRC_DIR}" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                  -DJAVA_HOME="${JAVA_HOME}" \
                  -G Ninja
          else
              cmake "${SRC_DIR}" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                  -DCMAKE_TOOLCHAIN_FILE="/workspace/cmake/toolchains/${TOOLCHAIN}" \
                  -DJAVA_HOME="${JAVA_HOME}" \
                  -G Ninja
          fi
          
          ninja
          
          if [ -f "${OUTPUT_NAME}" ]; then
              echo "✓ Built ${OUTPUT_NAME} for ${PLATFORM}"
              ls -lh "${OUTPUT_NAME}"
          else
              echo "✗ Failed to build for ${PLATFORM}"
              exit 1
          fi
          EOF
          
          chmod +x build-single-platform.sh
          
          # Run build in Docker
          docker run --rm \
            -v "$PWD:/workspace" \
            -w /workspace \
            "$IMAGE_NAME" \
            bash -c "chmod +x build-single-platform.sh && ./build-single-platform.sh '${{ matrix.platform }}' '${{ matrix.toolchain }}' '${{ matrix.output_name }}'"
      
      - name: Display build result
        working-directory: font-subsetting/font-subsetting-plugin
        run: |
          if [ -d "build/native-${{ matrix.platform }}" ]; then
            echo "✓ Library built for ${{ matrix.platform }}:"
            find "build/native-${{ matrix.platform }}" -name "${{ matrix.output_name }}" -exec ls -lh {} \;
          else
            echo "No build directory found"
          fi
      
      - name: Upload native library artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-library-${{ matrix.platform }}
          path: |
            font-subsetting/font-subsetting-plugin/build/native-${{ matrix.platform }}/${{ matrix.output_name }}
          retention-days: 7

  # Build and publish the plugin
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: build-native-libraries
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="dev-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
      
      - name: Download and organize native libraries
        run: |
          # Create the target directory structure
          mkdir -p font-subsetting/font-subsetting-plugin/src/main/resources/native
          
      - name: Download all native library artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: native-library-*
          path: native-libs-temp
      
      - name: Organize native libraries for build
        run: |
          # Place libraries in a staging directory that won't be overwritten by Gradle
          STAGING_DIR="font-subsetting/font-subsetting-plugin/native-libs-staging"
          mkdir -p "$STAGING_DIR"
          
          for platform_dir in native-libs-temp/native-library-*; do
            if [ -d "$platform_dir" ]; then
              platform=$(basename "$platform_dir" | sed 's/native-library-//')
              echo "Processing $platform..."
              
              mkdir -p "$STAGING_DIR/${platform}"
              
              # Find and copy the library file to staging
              find "$platform_dir" -type f \( -name "*.so" -o -name "*.dll" -o -name "*.dylib" \) \
                -exec cp {} "$STAGING_DIR/${platform}/" \;
            fi
          done
          
          echo "Native libraries staged for build:"
          find "$STAGING_DIR" -type f \
            \( -name "*.so" -o -name "*.dll" -o -name "*.dylib" \) \
            -exec ls -lh {} \;
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}
      
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Run tests
        run: ./gradlew -p font-subsetting test
      
      # Validation step removed - causes circular dependency issues in CI
      # The Gradle Plugin Portal will validate during publishing
      
      - name: Build plugin with native libraries
        run: |
          # Verify staged libraries are present
          echo "Native libraries available in staging:"
          find font-subsetting/font-subsetting-plugin/native-libs-staging -type f \
            \( -name "*.so" -o -name "*.dll" -o -name "*.dylib" \) 2>/dev/null || echo "No libraries found"
          
          # Build the entire plugin - Gradle will copy from staging directory
          ./gradlew -p font-subsetting build --build-cache --parallel --info
      
      - name: Verify native libraries in JAR
        working-directory: font-subsetting
        run: |
          echo "=== Verifying native libraries in JAR files ==="
          
          # Check the font-subsetting-plugin JAR specifically
          PLUGIN_JAR=$(find font-subsetting-plugin/build/libs -name "font-subsetting-plugin*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
          
          if [ -n "$PLUGIN_JAR" ]; then
            echo "Checking $PLUGIN_JAR:"
            echo "Native library contents:"
            jar tf "$PLUGIN_JAR" | grep -E "native/.*\.(so|dll|dylib)" || {
              echo "ERROR: No native libraries found in JAR!"
              echo "Full JAR contents:"
              jar tf "$PLUGIN_JAR"
              exit 1
            }
          else
            echo "ERROR: font-subsetting-plugin JAR not found!"
            exit 1
          fi
      
      - name: Publish to GitHub Packages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew -p font-subsetting publishAllPublicationsToGitHubPackagesRepository \
            -Pversion=${{ steps.version.outputs.version }} \
            -PgithubPackagesUrl=https://maven.pkg.github.com/${{ github.repository }} \
            -PgithubPackagesUsername=${{ github.actor }} \
            -PgithubPackagesPassword=${{ secrets.GITHUB_TOKEN }} \
            --build-cache \
            --parallel \
            --info
      
      - name: Publish to Gradle Plugin Portal
        if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '')
        run: |
          ./gradlew -p font-subsetting :font-subsetting-plugin:publishPlugins \
            -Pversion=${{ steps.version.outputs.version }} \
            -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} \
            -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }} \
            --no-daemon --stacktrace
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            font-subsetting/font-subsetting-plugin/build/libs/*.jar
          body: |
            ## Font Subsetting Plugin ${{ github.ref_name }}
            
            ### Installation
            ```kotlin
            plugins {
                id("com.davidmedenjak.fontsubsetting") version "${{ steps.version.outputs.version }}"
            }
            ```
            
            See [README](https://github.com/${{ github.repository }}) for usage instructions.
      
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            font-subsetting/*/build/libs/*.jar
            font-subsetting/*/build/reports/
          retention-days: 7
  
  # Test demo app - Disabled as demo app is for local development only
  # The plugin itself is thoroughly tested in the build-and-publish job
  # Uncomment if you want to test the demo app with published artifacts
  # Note: Requires updating app/build.gradle.kts to use published version instead of "local"
  
  # test-demo-app:
  #   name: Test Demo App
  #   runs-on: ubuntu-latest
  #   needs: build-and-publish
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && !startsWith(github.ref, 'refs/tags/')
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #         cache: 'gradle'
  #     
  #     - name: Setup Android SDK
  #       uses: android-actions/setup-android@v3
  #     
  #     - name: Cache Android SDK
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.android/sdk
  #           ~/.android/avd
  #         key: ${{ runner.os }}-android-${{ hashFiles('app/build.gradle*') }}
  #         restore-keys: |
  #           ${{ runner.os }}-android-
  #     
  #     - name: Setup Gradle
  #       uses: gradle/actions/setup-gradle@v4
  #       with:
  #         cache-read-only: false
  #     
  #     - name: Configure GitHub Packages for demo app
  #       run: |
  #         echo "githubPackagesUrl=https://maven.pkg.github.com/${{ github.repository }}" >> gradle.properties
  #         echo "githubPackagesUsername=${{ github.actor }}" >> gradle.properties
  #         echo "githubPackagesPassword=${{ secrets.GITHUB_TOKEN }}" >> gradle.properties
  #         
  #         # Remove the composite build to use published version
  #         sed -i '/includeBuild("font-subsetting")/d' settings.gradle.kts
  #         
  #         # Add GitHub Packages to both pluginManagement and dependencyResolutionManagement
  #         REPO_URL="https://maven.pkg.github.com/${{ github.repository }}"
  #         cat > settings.gradle.kts << ENDOFFILE
  #         pluginManagement {
  #             repositories {
  #                 maven {
  #                     url = uri("${REPO_URL}")
  #                     credentials {
  #                         username = providers.gradleProperty("githubPackagesUsername").get()
  #                         password = providers.gradleProperty("githubPackagesPassword").get()
  #                     }
  #                 }
  #                 google()
  #                 mavenCentral()
  #                 gradlePluginPortal()
  #             }
  #         }
  #         dependencyResolutionManagement {
  #             repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  #             repositories {
  #                 maven {
  #                     url = uri("${REPO_URL}")
  #                     credentials {
  #                         username = providers.gradleProperty("githubPackagesUsername").get()
  #                         password = providers.gradleProperty("githubPackagesPassword").get()
  #                     }
  #                 }
  #                 google()
  #                 mavenCentral()
  #             }
  #         }
  #         
  #         rootProject.name = "Font Subsetting"
  #         include(":app")
  #         ENDOFFILE
  #         
  #         echo "Updated settings.gradle.kts for CI:"
  #         cat settings.gradle.kts
  #     
  #     - name: Make gradlew executable
  #       run: chmod +x ./gradlew
  #     
  #     - name: Build demo app
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         ./gradlew :app:assembleDebug --build-cache --parallel --info
  #     
  #     - name: Check font subsetting results
  #       run: |
  #         echo "Checking if fonts were subsetted:"
  #         APK=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
  #         if [ -n "$APK" ]; then
  #           unzip -l "$APK" | grep -E "\.ttf|\.otf" | head -10
  #         fi
  #     
  #     - name: Upload APK
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: demo-app-apk
  #         path: app/build/outputs/apk/debug/*.apk
  #         retention-days: 7